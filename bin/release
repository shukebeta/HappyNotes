#!/bin/bash

# Check if the workspace is clean and on the master branch
if [ -n "$(git status --porcelain)" ]; then
  echo "Error: Your workspace has uncommitted changes. Please commit or stash them before continuing."
  exit 1
fi

if [ "$(git rev-parse --abbrev-ref HEAD)" != "master" ]; then
  echo "Error: You are not on the master branch. Please switch to the master branch before continuing."
  exit 1
fi

script_dir="$(dirname "$(readlink -f "$0")")"
cd $script_dir/..

# Check if the correct number of arguments is provided
if [ "$#" -ne 2 ]; then
  echo "Usage: $0 <version> <release_note>"
  echo "Current $(rg version: pubspec.yaml)"
  echo "Example: $0 1.2.3 \"This is a release note\""
  exit 1
fi

# Check if the version is in the correct format
VERSION=$1
if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
  echo "Error: Invalid version format. It should be in the format '[number].[number].[number]'."
  exit 1
fi

mv .env .env.backup
cp .env.production .env

RELEASE_NOTE=$2


# Pull the latest changes from the remote repository
git pull --ff-only origin master

# Set the version number in pubspec.yaml
sed -i "s/^version: .*$/version: $VERSION/" pubspec.yaml

# Add all changes to Git
git add pubspec.yaml

# Commit the changes with a message
git commit -m "Release version $VERSION"

# Create a Git tag with the release note
git tag -a "$VERSION" -m "$RELEASE_NOTE"

# Push the changes and the new tag to the remote repository
git push origin master
git push origin "$VERSION"
mv .env.backup .env

echo "Release process completed successfully for version $VERSION (tag: $VERSION)"
echo "Changes and the new tag have been pushed to the remote repository."
