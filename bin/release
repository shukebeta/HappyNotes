#!/bin/bash
set -e  # Exit on any error

# Check if the workspace is clean and on the master branch
if [ -n "$(git status --porcelain)" ]; then
  echo "Error: Your workspace has uncommitted changes. Please commit or stash them before continuing."
  exit 1
fi

if [ "$(git rev-parse --abbrev-ref HEAD)" != "master" ]; then
  echo "Error: You are not on the master branch. Please switch to the master branch before continuing."
  exit 1
fi

script_dir="$(dirname "$(readlink -f "$0")")"
cd $script_dir/..

# Check if the correct number of arguments is provided
if [ "$#" -ne 2 ]; then
  echo "Usage: $0 <version|auto|auto:patch|auto:minor|auto:major> <release_note>"
  echo "Current version: $(rg '^version:' pubspec.yaml | cut -d' ' -f2)"
  echo "Example: $0 1.2.3 \"This is a release note\""
  echo "Example: $0 auto \"Auto-increment patch version\""
  echo "Example: $0 auto:minor \"Auto-increment minor version\""
  echo "Example: $0 auto:major \"Auto-increment major version\""
  exit 1
fi

# Handle version parameter
VERSION_INPUT=$1
if [[ "$VERSION_INPUT" =~ ^auto(:(.+))?$ ]]; then
  # Auto-increment version
  increment_type="${BASH_REMATCH[2]:-patch}"  # Default to patch if not specified
  current_version=$(rg '^version:' pubspec.yaml | cut -d' ' -f2)
  echo "Current version: $current_version"
  
  # Parse major.minor.patch
  IFS='.' read -r major minor patch <<< "$current_version"
  
  case $increment_type in
    "major")
      major=$((major + 1))
      minor=0
      patch=0
      ;;
    "minor")
      minor=$((minor + 1))
      patch=0
      ;;
    "patch"|*)
      patch=$((patch + 1))
      ;;
  esac
  
  VERSION="$major.$minor.$patch"
  echo "Auto-incrementing $increment_type version to: $VERSION"
  
  # Confirm the new version
  read -p "Proceed with version $VERSION? (y/N): " confirm
  if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
    echo "Release cancelled."
    exit 1
  fi
else
  VERSION=$VERSION_INPUT
  # Check if the version is in the correct format
  if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "Error: Invalid version format. It should be in the format '[number].[number].[number]'."
    exit 1
  fi
fi

mv .env .env.backup
cp .env.production .env

RELEASE_NOTE=$2


# Pull the latest changes from the remote repository
echo "Pulling latest changes..."
git pull --ff-only origin master

# Set the version number in pubspec.yaml
echo "Updating version to $VERSION in pubspec.yaml..."
sed -i "s/^version: .*$/version: $VERSION/" pubspec.yaml

# Add all changes to Git
git add pubspec.yaml

# Commit the changes with a message
echo "Committing version bump..."
git commit -m "Release version $VERSION"

# Create a Git tag with the release note
echo "Creating tag $VERSION..."
git tag -a "$VERSION" -m "$RELEASE_NOTE"

# Push the changes and the new tag to the remote repository
echo "Pushing changes and tag to remote..."
git push origin master
git push origin "$VERSION"
mv .env.backup .env

echo "Release process completed successfully for version $VERSION (tag: $VERSION)"
echo "Changes and the new tag have been pushed to the remote repository."
