// Mocks generated by Mockito 5.4.6 from annotations
// in happy_notes/test/controllers/new_note_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i9;

import 'package:happy_notes/entities/note.dart' as _i6;
import 'package:happy_notes/models/notes_result.dart' as _i3;
import 'package:happy_notes/providers/notes_provider.dart' as _i5;
import 'package:happy_notes/services/notes_services.dart' as _i2;
import 'package:happy_notes/utils/operation_result.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotesService_0 extends _i1.SmartFake implements _i2.NotesService {
  _FakeNotesService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNotesResult_1 extends _i1.SmartFake implements _i3.NotesResult {
  _FakeNotesResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOperationResult_2<T> extends _i1.SmartFake implements _i4.OperationResult<T> {
  _FakeOperationResult_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NotesProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotesProvider extends _i1.Mock implements _i5.NotesProvider {
  MockNotesProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotesService get notesService => (super.noSuchMethod(
        Invocation.getter(#notesService),
        returnValue: _FakeNotesService_0(
          this,
          Invocation.getter(#notesService),
        ),
      ) as _i2.NotesService);

  @override
  bool get isLoadingAdd => (super.noSuchMethod(
        Invocation.getter(#isLoadingAdd),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoadingList => (super.noSuchMethod(
        Invocation.getter(#isLoadingList),
        returnValue: false,
      ) as bool);

  @override
  List<_i6.Note> get notes => (super.noSuchMethod(
        Invocation.getter(#notes),
        returnValue: <_i6.Note>[],
      ) as List<_i6.Note>);

  @override
  int get currentPage => (super.noSuchMethod(
        Invocation.getter(#currentPage),
        returnValue: 0,
      ) as int);

  @override
  int get totalPages => (super.noSuchMethod(
        Invocation.getter(#totalPages),
        returnValue: 0,
      ) as int);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get autoPageEnabled => (super.noSuchMethod(
        Invocation.getter(#autoPageEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get isAutoLoading => (super.noSuchMethod(
        Invocation.getter(#isAutoLoading),
        returnValue: false,
      ) as bool);

  @override
  Map<String, List<_i6.Note>> get groupedNotes => (super.noSuchMethod(
        Invocation.getter(#groupedNotes),
        returnValue: <String, List<_i6.Note>>{},
      ) as Map<String, List<_i6.Note>>);

  @override
  bool get isAuthStateInitialized => (super.noSuchMethod(
        Invocation.getter(#isAuthStateInitialized),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<_i3.NotesResult> fetchNotes(
    int? pageSize,
    int? pageNumber,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchNotes,
          [
            pageSize,
            pageNumber,
          ],
        ),
        returnValue: _i7.Future<_i3.NotesResult>.value(_FakeNotesResult_1(
          this,
          Invocation.method(
            #fetchNotes,
            [
              pageSize,
              pageNumber,
            ],
          ),
        )),
      ) as _i7.Future<_i3.NotesResult>);

  @override
  _i7.Future<void> performDelete(int? noteId) => (super.noSuchMethod(
        Invocation.method(
          #performDelete,
          [noteId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> loadPage(int? pageNumber) => (super.noSuchMethod(
        Invocation.method(
          #loadPage,
          [pageNumber],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> fetchNotesLegacy() => (super.noSuchMethod(
        Invocation.method(
          #fetchNotesLegacy,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> refreshCurrentPage() => (super.noSuchMethod(
        Invocation.method(
          #refreshCurrentPage,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> refreshNotes() => (super.noSuchMethod(
        Invocation.method(
          #refreshNotes,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i6.Note?> addNote(
    String? content, {
    bool? isPrivate = false,
    bool? isMarkdown = false,
    String? publishDateTime = '',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNote,
          [content],
          {
            #isPrivate: isPrivate,
            #isMarkdown: isMarkdown,
            #publishDateTime: publishDateTime,
          },
        ),
        returnValue: _i7.Future<_i6.Note?>.value(),
      ) as _i7.Future<_i6.Note?>);

  @override
  _i7.Future<bool> undeleteNote(int? noteId) => (super.noSuchMethod(
        Invocation.method(
          #undeleteNote,
          [noteId],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<_i6.Note?> getNote(int? noteId) => (super.noSuchMethod(
        Invocation.method(
          #getNote,
          [noteId],
        ),
        returnValue: _i7.Future<_i6.Note?>.value(),
      ) as _i7.Future<_i6.Note?>);

  @override
  _i7.Future<void> searchNotes(String? query) => (super.noSuchMethod(
        Invocation.method(
          #searchNotes,
          [query],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> fetchTagNotes(String? tag) => (super.noSuchMethod(
        Invocation.method(
          #fetchTagNotes,
          [tag],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void clearNotesCache() => super.noSuchMethod(
        Invocation.method(
          #clearNotesCache,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> onLogin() => (super.noSuchMethod(
        Invocation.method(
          #onLogin,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> navigateToPage(int? pageNumber) => (super.noSuchMethod(
        Invocation.method(
          #navigateToPage,
          [pageNumber],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> refresh() => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  bool canAutoLoadNext() => (super.noSuchMethod(
        Invocation.method(
          #canAutoLoadNext,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<void> autoLoadNext() => (super.noSuchMethod(
        Invocation.method(
          #autoLoadNext,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> autoLoadPrevious() => (super.noSuchMethod(
        Invocation.method(
          #autoLoadPrevious,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  bool canAutoLoadPrevious() => (super.noSuchMethod(
        Invocation.method(
          #canAutoLoadPrevious,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  void setAutoPageEnabled(bool? enabled) => super.noSuchMethod(
        Invocation.method(
          #setAutoPageEnabled,
          [enabled],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<_i4.OperationResult<void>> deleteNote(int? noteId) => (super.noSuchMethod(
        Invocation.method(
          #deleteNote,
          [noteId],
        ),
        returnValue: _i7.Future<_i4.OperationResult<void>>.value(_FakeOperationResult_2<void>(
          this,
          Invocation.method(
            #deleteNote,
            [noteId],
          ),
        )),
      ) as _i7.Future<_i4.OperationResult<void>>);

  @override
  void updateLocalCache(_i6.Note? updatedNote) => super.noSuchMethod(
        Invocation.method(
          #updateLocalCache,
          [updatedNote],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> loadInitialData() => (super.noSuchMethod(
        Invocation.method(
          #loadInitialData,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> onLogout() => (super.noSuchMethod(
        Invocation.method(
          #onLogout,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> onAuthStateChanged(bool? isAuthenticated) => (super.noSuchMethod(
        Invocation.method(
          #onAuthStateChanged,
          [isAuthenticated],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void resetAuthState() => super.noSuchMethod(
        Invocation.method(
          #resetAuthState,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String handleServiceError(
    dynamic error,
    String? operation,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleServiceError,
          [
            error,
            operation,
          ],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #handleServiceError,
            [
              error,
              operation,
            ],
          ),
        ),
      ) as String);

  @override
  _i7.Future<T?> executeWithErrorHandling<T>({
    required _i7.Future<T> Function()? operation,
    required void Function(bool)? setLoading,
    required void Function(String?)? setError,
    required String? operationName,
    void Function()? onSuccess,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #executeWithErrorHandling,
          [],
          {
            #operation: operation,
            #setLoading: setLoading,
            #setError: setError,
            #operationName: operationName,
            #onSuccess: onSuccess,
          },
        ),
        returnValue: _i7.Future<T?>.value(),
      ) as _i7.Future<T?>);

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
